#include <QApplication>
#include <QWidget>
#include <QVBoxLayout>
#include <QLabel>
#include <QLineEdit>
#include <QPushButton>
#include <QComboBox>
#include <QMessageBox>
#include <cstdlib>
#include <ctime>

class GuessNumberGame : public QWidget {
    Q_OBJECT

public:
    GuessNumberGame(QWidget *parent = nullptr) : QWidget(parent), maxNumber(10), attempts(0) {
        setWindowTitle("Угадай число");

        QVBoxLayout *layout = new QVBoxLayout(this);
        
        QLabel *label = new QLabel("Выберите уровень сложности:", this);
        layout->addWidget(label);

        levelComboBox = new QComboBox(this);
        levelComboBox->addItem("Легкий (1-10)");
        levelComboBox->addItem("Средний (1-100)");
        levelComboBox->addItem("Сложный (1-1000)");
        layout->addWidget(levelComboBox);

        QPushButton *startButton = new QPushButton("Начать игру", this);
        layout->addWidget(startButton);
        
        QLabel *guessLabel = new QLabel("Введите ваше число:", this);
        layout->addWidget(guessLabel);

        guessInput = new QLineEdit(this);
        layout->addWidget(guessInput);

        QPushButton *guessButton = new QPushButton("Угадать", this);
        layout->addWidget(guessButton);

        connect(startButton, &QPushButton::clicked, this, &GuessNumberGame::startGame);
        connect(guessButton, &QPushButton::clicked, this, &GuessNumberGame::makeGuess);
    }

private slots:
    void startGame() {
        switch (levelComboBox->currentIndex()) {
            case 0: maxNumber = 10; break;
            case 1: maxNumber = 100; break;
            case 2: maxNumber = 1000; break;
        }
        
        srand(static_cast<unsigned int>(time(0)));
        secretNumber = rand() % maxNumber + 1;
        attempts = 0;

        QMessageBox::information(this, "Игра начата", "Я загадал число от 1 до " + QString::number(maxNumber) + ". Попробуйте угадать его!");
    }

    void makeGuess() {
        bool ok;
        int userGuess = guessInput->text().toInt(&ok);

        if (!ok) {
            QMessageBox::warning(this, "Ошибка", "Пожалуйста, введите корректное число.");
            return;
        }

        attempts++;
        
        if (userGuess < secretNumber) {
            QMessageBox::information(this, "Подсказка", "Загаданное число больше.");
        } else if (userGuess > secretNumber) {
            QMessageBox::information(this, "Подсказка", "Загаданное число меньше.");
        } else {
            QMessageBox::information(this, "Поздравляем!", "Вы угадали число за " + QString::number(attempts) + " попыток.");
            guessInput->clear();
        }
    }

private:
    QComboBox *levelComboBox;
    QLineEdit *guessInput;
    int secretNumber;
    int maxNumber;
    int attempts;
};

int main(int argc, char *argv[]) {
    QApplication app(argc, argv);
    
    GuessNumberGame game;
    game.resize(300, 200);
    game.show();

    return app.exec();
}

#include "main.moc"
